---
import type { ConverterButton, ConverterOption } from '@/shared/types';
import Button from '@/shared/ui/base/button.astro';

export interface Props {
  options?: ConverterOption[];
  buttons?: ConverterButton[];
  class?: string;
}

const {
  options = [],
  buttons = [
    { id: 'convertBtn', label: 'Convert', variant: 'convert', icon: 'ðŸ”„' },
    { id: 'clearBtn', label: 'Clear', variant: 'clear', icon: 'ðŸ—‘' },
    { id: 'copyBtn', label: 'Copy', variant: 'copy', icon: 'ðŸ“‹' },
  ],
  class: className = '',
} = Astro.props;
---

<div class={`converter-header ${className}`}>
  {
    options.length > 0 && (
      <div class='options-group'>
        {options.map(option => (
          <div class='checkbox-group'>
            <input
              type='checkbox'
              id={option.id}
              checked={option.checked}
            />
            <label for={option.id}>{option.label}</label>
          </div>
        ))}
      </div>
    )
  }

  <div class='action-buttons'>
    {
      buttons.map(button => (
        <Button
          variant={button.variant}
          id={button.id}
          type='button'>
          {button.icon && <span>{button.icon}</span>}
          {button.label}
        </Button>
      ))
    }
  </div>
</div>

<style>
  .converter-header {
    background: white;
    border-bottom: 1px solid #e2e8f0;
    padding: 1rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .options-group {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .checkbox-group input[type='checkbox'] {
    width: 1rem;
    height: 1rem;
    accent-color: #3b82f6;
  }

  .checkbox-group label {
    font-size: 0.875rem;
    color: #374151;
    cursor: pointer;
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
  }

  @media (max-width: 768px) {
    .header {
      flex-direction: column;
      gap: 0.5rem;
    }

    .options-group {
      flex-wrap: wrap;
    }
  }
</style>
