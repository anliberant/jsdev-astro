---
import { codeToHtml } from 'shiki';

// Helper to decode HTML entities from the slot
function simpleDecodeHtml(text: string): string {
  if (!text) return '';
  return text
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&amp;/g, '&');
}

export interface Props {
  'data-language'?: string;
  file?: string;
}

const { 'data-language': language = 'plaintext', file } = Astro.props;

// The raw code is the content passed to the default slot by MDX
let rawCode = '';
try {
  const slotContent = await Astro.slots.render('default');
  // We need to strip the outer <code>...</code> tags and decode HTML entities
  rawCode = simpleDecodeHtml(slotContent.replace(/<[^>]*>/g, '')).trim();
} catch {
  rawCode = 'Error rendering code from slot.';
}

// Highlight the code to HTML using the correct language from `data-language`
const highlightedHtml = await codeToHtml(rawCode, {
  lang: language,
  themes: {
    light: 'github-light',
    dark: 'vitesse-dark',
  },
});
---

<div
  class='code-block'
  data-raw-code={rawCode}>
  <div class='code-header'>
    <div class='language-badge'>{language}</div>
    {file && <div class='file-name'>{file}</div>}
    <div class='spacer'></div>
    <button class='copy-button'>
      <span class='copy-text'>Copy</span>
      <span class='copied-text'>Copied!</span>
    </button>
  </div>
  <div
    class='code-content'
    set:html={highlightedHtml}>
    <!-- Shiki-highlighted HTML will be injected here -->
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const codeBlocks = document.querySelectorAll('.code-block');

    codeBlocks.forEach(codeBlock => {
      const copyButton = codeBlock.querySelector('.copy-button');

      if (copyButton) {
        copyButton.addEventListener('click', async () => {
          const rawCode = (codeBlock as HTMLElement).dataset.rawCode;
          if (rawCode) {
            try {
              await navigator.clipboard.writeText(rawCode);
              copyButton.classList.add('copied');
              setTimeout(() => {
                copyButton.classList.remove('copied');
              }, 2000);
            } catch (err) {
              console.error('Failed to copy text: ', err);
            }
          }
        });
      }
    });
  });
</script>

<style>
  .code-block {
    border-radius: var(--radius);
    margin: 1rem 0;
    overflow: hidden;
    max-width: 100%;
    border: 1px solid #333;
    position: relative;
  }

  @media (min-width: 1200px) {
    .code-block {
      margin: 2rem 0;
      max-width: 80%;
    }
  }

  .code-header {
    display: flex;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: var(--shiki-bg);
    color: var(--shiki-fg);
    border-bottom: 1px solid #333;
  }

  .language-badge {
    background-color: #333;
    color: #ffffff;
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .file-name {
    color: #888;
    font-size: 0.875rem;
    font-style: italic;
    margin-left: 1rem;
  }

  .spacer {
    flex: 1;
  }

  .copy-button {
    background-color: hsl(var(--primary, #0f172a));
    color: hsl(var(--primary-foreground, #ffffff));
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    cursor: pointer;
    font-size: 0.75rem;
    transition: all 0.2s ease;
  }

  .copy-button:hover {
    background-color: var(--primary-hover, rgba(15, 23, 42, 0.9));
  }
  :global(.dark) .copy-button:hover {
    color: white;
  }

  /* --- Start: Copy Button Text Logic --- */

  /* By default, show the original text and hide the copied text */
  :global(.copy-button .copy-text) {
    display: inline;
  }
  :global(.copy-button .copied-text) {
    display: none;
  }

  /* When .copied is added, hide the original text and show the copied text */
  :global(.copy-button.copied .copy-text) {
    display: none;
  }
  :global(.copy-button.copied .copied-text) {
    display: inline;
  }

  /* --- End: Copy Button Text Logic --- */

  .code-content {
    overflow-x: auto;
    max-height: 600px;
    overflow-y: auto;
  }

  .code-content :global(pre.shiki) {
    margin: 0;
    padding: 1rem;
    font-size: 0.875rem;
    line-height: 1.5;
    flex: 1;
    overflow: visible;
  }

  /* This is the magic rule that swaps the colors in dark mode */
  :global(.dark .shiki) {
    background-color: var(--shiki-dark-bg) !important;
  }
  :global(.dark .shiki span) {
    color: var(--shiki-dark) !important;
  }
</style>
