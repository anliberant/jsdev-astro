<div class='table-editor'>
  <div class='editor-toolbar'>
    <div class='toolbar-group'>
      <button
        type='button'
        class='toolbar-btn'
        id='select-all'
        title='Select All'>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <path d='M9 11H3V5H9V11Z'></path>
          <path d='M21 11H15V5H21V11Z'></path>
          <path d='M21 19H15V13H21V19Z'></path>
          <path d='M9 19H3V13H9V19Z'></path>
        </svg>
      </button>

      <div class='toolbar-separator'></div>

      <button
        type='button'
        class='toolbar-btn'
        id='merge-cells'
        title='Merge Selected Cells'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <path d='M4 4H20V8H4V4Z'></path>
          <path d='M4 12H20V16H4V12Z'></path>
          <path d='M8 8V12'></path>
          <path d='M16 8V12'></path>
        </svg>
      </button>

      <button
        type='button'
        class='toolbar-btn'
        id='split-cells'
        title='Split Merged Cells'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <path d='M4 4H10V10H4V4Z'></path>
          <path d='M14 4H20V10H14V4Z'></path>
          <path d='M4 14H10V20H4V14Z'></path>
          <path d='M14 14H20V20H14V14Z'></path>
        </svg>
      </button>
    </div>

    <div class='toolbar-group'>
      <button
        type='button'
        class='toolbar-btn'
        id='insert-row-before'
        title='Insert Row Before'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <line
            x1='12'
            y1='5'
            x2='12'
            y2='19'
          ></line>
          <line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
          ></line>
        </svg>
        ↑
      </button>

      <button
        type='button'
        class='toolbar-btn'
        id='insert-row-after'
        title='Insert Row After'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <line
            x1='12'
            y1='5'
            x2='12'
            y2='19'
          ></line>
          <line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
          ></line>
        </svg>
        ↓
      </button>

      <button
        type='button'
        class='toolbar-btn'
        id='insert-col-before'
        title='Insert Column Before'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <line
            x1='12'
            y1='5'
            x2='12'
            y2='19'
          ></line>
          <line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
          ></line>
        </svg>
        ←
      </button>

      <button
        type='button'
        class='toolbar-btn'
        id='insert-col-after'
        title='Insert Column After'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <line
            x1='12'
            y1='5'
            x2='12'
            y2='19'
          ></line>
          <line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
          ></line>
        </svg>
        →
      </button>
    </div>

    <div class='toolbar-group'>
      <button
        type='button'
        class='toolbar-btn danger'
        id='delete-row'
        title='Delete Row'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <polyline points='3,6 5,6 21,6'></polyline>
          <path
            d='m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2'
          ></path>
        </svg>
        Row
      </button>

      <button
        type='button'
        class='toolbar-btn danger'
        id='delete-col'
        title='Delete Column'
        disabled>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <polyline points='3,6 5,6 21,6'></polyline>
          <path
            d='m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2'
          ></path>
        </svg>
        Col
      </button>
    </div>
  </div>

  <div class='table-container'>
    <div class='table-wrapper'>
      <table
        class='editable-table'
        id='editable-table'>
        <tbody id='table-body'>
          <!-- Table content will be generated here -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Selection info -->
  <div
    class='selection-info'
    id='selection-info'
    style='display: none;'>
    <span id='selection-text'>No cells selected</span>
  </div>
</div>

<style>
  .table-editor {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--radius);
    overflow: hidden;
  }

  .editor-toolbar {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 1rem;
    background: var(--color-background-alt);
    border-bottom: 1px solid var(--color-border);
    flex-wrap: wrap;
  }

  .toolbar-group {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .toolbar-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem;
    background: transparent;
    border: 1px solid var(--color-border);
    border-radius: var(--radius);
    color: var(--color-text);
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 32px;
    justify-content: center;
  }

  .toolbar-btn:hover:not(:disabled) {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .toolbar-btn.danger:hover:not(:disabled) {
    background: var(--color-error);
    border-color: var(--color-error);
  }

  .toolbar-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .toolbar-separator {
    width: 1px;
    height: 20px;
    background: var(--color-border);
    margin: 0 0.5rem;
  }

  .table-container {
    padding: 1rem;
    max-height: 400px;
    overflow: auto;
  }

  .table-wrapper {
    position: relative;
  }

  .editable-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-family: var(--font-family-sans);
    font-size: 0.875rem;
  }

  .editable-table td,
  .editable-table th {
    position: relative;
    border: 1px solid var(--color-border);
    padding: 0;
    min-width: 100px;
    min-height: 36px;
    background: var(--color-background);
  }

  .editable-table th {
    background: var(--color-background-alt);
    font-weight: 600;
  }

  .cell-input {
    width: 100%;
    height: 100%;
    min-height: 36px;
    padding: 8px 12px;
    border: none;
    background: transparent;
    color: var(--color-text);
    font-family: inherit;
    font-size: inherit;
    resize: none;
    outline: none;
  }

  .cell-input:focus {
    background: rgba(59, 130, 246, 0.05);
    box-shadow: inset 0 0 0 2px var(--color-primary);
  }

  .cell-selected {
    background: rgba(59, 130, 246, 0.1) !important;
    box-shadow: inset 0 0 0 2px var(--color-primary) !important;
  }

  .cell-header {
    background: var(--color-background-alt);
  }

  .cell-merged {
    background: rgba(34, 197, 94, 0.1);
  }

  .selection-info {
    padding: 0.5rem 1rem;
    background: var(--color-background-alt);
    border-top: 1px solid var(--color-border);
    font-size: 0.75rem;
    color: var(--color-text-light);
  }

  /* Row and column highlights */
  .row-highlight {
    background: rgba(59, 130, 246, 0.05) !important;
  }

  .col-highlight {
    background: rgba(59, 130, 246, 0.05) !important;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .editor-toolbar {
      padding: 0.5rem;
      gap: 0.5rem;
    }

    .toolbar-btn {
      padding: 0.4rem;
      min-width: 28px;
      font-size: 0.7rem;
    }

    .table-container {
      padding: 0.5rem;
      max-height: 300px;
    }

    .editable-table td,
    .editable-table th {
      min-width: 80px;
      min-height: 32px;
    }

    .cell-input {
      min-height: 32px;
      padding: 6px 8px;
      font-size: 0.8rem;
    }
  }
</style>

<script>
  let selectedCells = new Set();
  let isSelecting = false;
  let startCell = null;

  function getTableController() {
    return window.tableController;
  }

  function renderTable() {
    const controller = getTableController();
    if (!controller) return;

    const data = controller.getData();
    const config = controller.getConfig();
    const tableBody = document.getElementById('table-body');

    tableBody.innerHTML = '';

    data.forEach((row, rowIndex) => {
      const tr = document.createElement('tr');
      tr.dataset.rowIndex = rowIndex;

      row.cells.forEach((cell, colIndex) => {
        if (cell.merged) return; // Skip merged cells

        const cellElement = document.createElement(cell.isHeader ? 'th' : 'td');
        cellElement.dataset.rowIndex = rowIndex;
        cellElement.dataset.colIndex = colIndex;

        if (cell.rowspan > 1) cellElement.rowSpan = cell.rowspan;
        if (cell.colspan > 1) cellElement.colSpan = cell.colspan;

        const input = document.createElement('textarea');
        input.className = 'cell-input';
        input.value = cell.content;
        input.rows = 1;

        input.addEventListener('input', e => {
          e.target.style.height = 'auto';
          e.target.style.height = e.target.scrollHeight + 'px';

          controller.updateCell(rowIndex, colIndex, e.target.value);
          updateOutput();
        });

        cellElement.addEventListener('mousedown', e => {
          if (e.shiftKey && selectedCells.size > 0) {
            selectRange(startCell, { row: rowIndex, col: colIndex });
          } else if (e.ctrlKey || e.metaKey) {
            toggleCellSelection(cellElement, rowIndex, colIndex);
          } else {
            clearSelection();
            selectCell(cellElement, rowIndex, colIndex);
            startCell = { row: rowIndex, col: colIndex };
          }
          updateToolbarState();
          updateSelectionInfo();
        });

        cellElement.appendChild(input);
        tr.appendChild(cellElement);
      });

      tableBody.appendChild(tr);
    });
  }

  function selectCell(cellElement, rowIndex, colIndex) {
    cellElement.classList.add('cell-selected');
    selectedCells.add(`${rowIndex}-${colIndex}`);
  }

  function toggleCellSelection(cellElement, rowIndex, colIndex) {
    const cellKey = `${rowIndex}-${colIndex}`;
    if (selectedCells.has(cellKey)) {
      cellElement.classList.remove('cell-selected');
      selectedCells.delete(cellKey);
    } else {
      selectCell(cellElement, rowIndex, colIndex);
    }
  }

  function selectRange(start, end) {
    clearSelection();

    const minRow = Math.min(start.row, end.row);
    const maxRow = Math.max(start.row, end.row);
    const minCol = Math.min(start.col, end.col);
    const maxCol = Math.max(start.col, end.col);

    for (let row = minRow; row <= maxRow; row++) {
      for (let col = minCol; col <= maxCol; col++) {
        const cellElement = document.querySelector(
          `[data-row-index="${row}"][data-col-index="${col}"]`
        );
        if (cellElement) {
          selectCell(cellElement, row, col);
        }
      }
    }
  }

  function clearSelection() {
    document.querySelectorAll('.cell-selected').forEach(cell => {
      cell.classList.remove('cell-selected');
    });
    selectedCells.clear();
  }

  function updateToolbarState() {
    const hasSelection = selectedCells.size > 0;
    const hasMultipleSelection = selectedCells.size > 1;

    document.getElementById('merge-cells').disabled = !hasMultipleSelection;
    document.getElementById('split-cells').disabled = !hasSelection;
    document.getElementById('insert-row-before').disabled = !hasSelection;
    document.getElementById('insert-row-after').disabled = !hasSelection;
    document.getElementById('insert-col-before').disabled = !hasSelection;
    document.getElementById('insert-col-after').disabled = !hasSelection;
    document.getElementById('delete-row').disabled = !hasSelection;
    document.getElementById('delete-col').disabled = !hasSelection;
  }

  function updateSelectionInfo() {
    const infoElement = document.getElementById('selection-info');
    const textElement = document.getElementById('selection-text');

    if (selectedCells.size === 0) {
      infoElement.style.display = 'none';
    } else {
      infoElement.style.display = 'block';
      textElement.textContent = `${selectedCells.size} cell${selectedCells.size > 1 ? 's' : ''} selected`;
    }
  }

  function updateOutput() {
    const event = new CustomEvent('tableDataChanged');
    document.dispatchEvent(event);
  }

  document.getElementById('select-all').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller) return;

    clearSelection();
    const data = controller.getData();

    data.forEach((row, rowIndex) => {
      row.cells.forEach((cell, colIndex) => {
        if (!cell.merged) {
          const cellElement = document.querySelector(
            `[data-row-index="${rowIndex}"][data-col-index="${colIndex}"]`
          );
          if (cellElement) {
            selectCell(cellElement, rowIndex, colIndex);
          }
        }
      });
    });

    updateToolbarState();
    updateSelectionInfo();
  });

  document.getElementById('insert-row-before').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    const firstSelected = Array.from(selectedCells)[0].split('-');
    const rowIndex = parseInt(firstSelected[0]);

    controller.addRow(rowIndex);
    renderTable();
    updateOutput();
  });

  document.getElementById('insert-row-after').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    const firstSelected = Array.from(selectedCells)[0].split('-');
    const rowIndex = parseInt(firstSelected[0]) + 1;

    controller.addRow(rowIndex);
    renderTable();
    updateOutput();
  });

  document.getElementById('insert-col-before').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    const firstSelected = Array.from(selectedCells)[0].split('-');
    const colIndex = parseInt(firstSelected[1]);

    controller.addColumn(colIndex);
    renderTable();
    updateOutput();
  });

  document.getElementById('insert-col-after').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    const firstSelected = Array.from(selectedCells)[0].split('-');
    const colIndex = parseInt(firstSelected[1]) + 1;

    controller.addColumn(colIndex);
    renderTable();
    updateOutput();
  });

  document.getElementById('delete-row').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    if (confirm('Are you sure you want to delete the selected row(s)?')) {
      const rowIndices = [
        ...new Set(Array.from(selectedCells).map(cell => parseInt(cell.split('-')[0]))),
      ];
      rowIndices.sort((a, b) => b - a);

      rowIndices.forEach(rowIndex => {
        controller.removeRow(rowIndex);
      });

      clearSelection();
      renderTable();
      updateOutput();
      updateToolbarState();
    }
  });

  document.getElementById('delete-col').addEventListener('click', () => {
    const controller = getTableController();
    if (!controller || selectedCells.size === 0) return;

    if (confirm('Are you sure you want to delete the selected column(s)?')) {
      const colIndices = [
        ...new Set(Array.from(selectedCells).map(cell => parseInt(cell.split('-')[1]))),
      ];
      colIndices.sort((a, b) => b - a);

      colIndices.forEach(colIndex => {
        controller.removeColumn(colIndex);
      });

      clearSelection();
      renderTable();
      updateOutput();
      updateToolbarState();
    }
  });

  document.addEventListener('tableConfigChanged', () => {
    renderTable();
  });

  document.addEventListener('tableDataChanged', event => {
    if (event.detail) {
      renderTable();
    }
  });

  document.addEventListener('DOMContentLoaded', () => {
    const checkController = setInterval(() => {
      if (window.tableController) {
        clearInterval(checkController);
        renderTable();
        updateToolbarState();
      }
    }, 100);
  });

  document.addEventListener('click', e => {
    if (!e.target.closest('.table-editor')) {
      clearSelection();
      updateToolbarState();
      updateSelectionInfo();
    }
  });
</script>
