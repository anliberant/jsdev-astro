---
import TableConfigPanel from './table-config-panel.astro';
import TableEditor from './table-editor.astro';
import TablePreview from './table-preview.astro';
---

<div class='table-generator'>
  <div class='generator-layout'>
    <aside class='config-panel'>
      <TableConfigPanel />
    </aside>

    <main class='generator-main'>
      <section class='editor-section'>
        <h2>Table Editor</h2>
        <TableEditor />
      </section>

      <section class='preview-section'>
        <h2>Live Preview</h2>
        <TablePreview />
      </section>
    </main>

    <aside class='output-panel'>
      <h3>Generated Code</h3>
      <div class='output-tabs'>
        <button
          class='tab-button active'
          data-tab='html'
          >HTML</button
        >
        <button
          class='tab-button'
          data-tab='css'
          >CSS</button
        >
        <button
          class='tab-button'
          data-tab='csv'
          >CSV</button
        >
      </div>

      <div class='output-content'>
        <div
          class='tab-panel active'
          id='html-panel'>
          <div class='code-output'>
            <pre><code id="html-output" class="language-html" /></pre>
            <button
              class='copy-btn'
              data-target='html-output'>
              <svg
                width='16'
                height='16'
                viewBox='0 0 24 24'
                fill='none'
                stroke='currentColor'
                stroke-width='2'>
                <rect
                  x='9'
                  y='9'
                  width='13'
                  height='13'
                  rx='2'
                  ry='2'
                ></rect>
                <path d='M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1'></path>
              </svg>
              Copy HTML
            </button>
          </div>
        </div>

        <div
          class='tab-panel'
          id='css-panel'>
          <div class='code-output'>
            <pre><code id="css-output" class="language-css" /></pre>
            <button
              class='copy-btn'
              data-target='css-output'>
              <svg
                width='16'
                height='16'
                viewBox='0 0 24 24'
                fill='none'
                stroke='currentColor'
                stroke-width='2'>
                <rect
                  x='9'
                  y='9'
                  width='13'
                  height='13'
                  rx='2'
                  ry='2'
                ></rect>
                <path d='M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1'></path>
              </svg>
              Copy CSS
            </button>
          </div>
        </div>

        <div
          class='tab-panel'
          id='csv-panel'>
          <div class='code-output'>
            <pre><code id="csv-output" class="language-csv" /></pre>
            <button
              class='copy-btn'
              data-target='csv-output'>
              <svg
                width='16'
                height='16'
                viewBox='0 0 24 24'
                fill='none'
                stroke='currentColor'
                stroke-width='2'>
                <rect
                  x='9'
                  y='9'
                  width='13'
                  height='13'
                  rx='2'
                  ry='2'
                ></rect>
                <path d='M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1'></path>
              </svg>
              Copy CSV
            </button>
          </div>
        </div>
      </div>

      <div class='export-options'>
        <button
          class='btn btn-primary'
          id='download-html'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <path d='M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4'></path>
            <polyline points='7,10 12,15 17,10'></polyline>
            <line
              x1='12'
              y1='15'
              x2='12'
              y2='3'
            ></line>
          </svg>
          Download HTML
        </button>

        <button
          class='btn btn-secondary'
          id='download-csv'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <path d='M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4'></path>
            <polyline points='7,10 12,15 17,10'></polyline>
            <line
              x1='12'
              y1='15'
              x2='12'
              y2='3'
            ></line>
          </svg>
          Download CSV
        </button>

        <button
          class='btn btn-outline'
          id='import-csv'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <path d='M21 9v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9'></path>
            <polyline points='7,14 12,9 17,14'></polyline>
            <line
              x1='12'
              y1='9'
              x2='12'
              y2='21'
            ></line>
          </svg>
          Import CSV
        </button>
      </div>
    </aside>
  </div>
</div>

<input
  type='file'
  id='csv-file-input'
  accept='.csv'
  style='display: none;'
/>

<style>
  .table-generator {
    max-width: 100%;
    margin: 0 auto;
    padding: 1rem;
    overflow-x: hidden;
    margin: 2rem 0;
  }

  .generator-layout {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    min-height: 600px;
  }

  /* Панели */
  .config-panel,
  .output-panel {
    background: hsl(var(--muted));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    padding: 1.5rem;
    width: 100%;
    box-sizing: border-box;
  }

  .generator-main {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    width: 100%;
    min-width: 0;
  }

  .editor-section,
  .preview-section {
    background: hsl(var(--background));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    padding: 1.5rem;
    width: 100%;
    box-sizing: border-box;
    min-width: 0;
    overflow: hidden;
  }

  .editor-section h2,
  .preview-section h2,
  .output-panel h3 {
    margin: 0 0 1.5rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: hsl(var(--foreground));
  }

  /* Вкладки */
  .output-tabs {
    display: flex;
    border-bottom: 1px solid hsl(var(--border));
    margin-bottom: 1rem;
    overflow-x: auto;
  }

  .tab-button {
    padding: 0.5rem 1rem;
    border: none;
    background: none;
    color: hsl(var(--muted-foreground));
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 500;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .tab-button:hover {
    color: hsl(var(--foreground));
  }

  .tab-button.active {
    color: hsl(var(--primary));
    border-bottom-color: hsl(var(--primary));
  }

  .tab-panel {
    display: none;
  }

  .tab-panel.active {
    display: block;
  }

  .code-output {
    position: relative;
  }

  .code-output pre {
    background: hsl(var(--muted));
    color: hsl(var(--foreground));
    padding: 1rem;
    border-radius: var(--radius);
    font-size: 0.875rem;
    line-height: 1.5;
    overflow-x: auto;
    max-height: 300px;
    overflow-y: auto;
    margin: 0;
    white-space: pre-wrap;
    word-wrap: break-word;
    border: 1px solid hsl(var(--border));
  }

  .copy-btn {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: hsl(var(--background));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    color: hsl(var(--foreground));
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .copy-btn:hover {
    background: hsl(var(--muted));
  }

  .export-options {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid hsl(var(--border));
  }

  .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border-radius: var(--radius);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    border: 1px solid transparent;
    white-space: nowrap;
  }

  .btn-primary {
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border-color: hsl(var(--primary));
  }

  .btn-primary:hover {
    background: hsl(var(--primary) / 0.9);
  }

  .btn-secondary {
    background: hsl(var(--secondary));
    color: hsl(var(--secondary-foreground));
    border-color: hsl(var(--secondary));
  }

  .btn-secondary:hover {
    background: hsl(var(--secondary) / 0.8);
  }

  .btn-outline {
    background: transparent;
    color: hsl(var(--foreground));
    border-color: hsl(var(--border));
  }

  .btn-outline:hover {
    background: hsl(var(--muted));
    border-color: hsl(var(--primary));
    color: hsl(var(--primary));
  }

  @media (min-width: 768px) {
    .generator-layout {
      display: grid;
      grid-template-columns: 280px 1fr;
      grid-template-rows: auto auto;
      gap: 2rem;
      grid-template-areas:
        'config main'
        'output main';
    }

    .config-panel {
      grid-area: config;
    }

    .generator-main {
      grid-area: main;
    }

    .output-panel {
      grid-area: output;
    }
  }

  @media (min-width: 1200px) {
    .generator-layout {
      grid-template-columns: 280px 1fr 320px;
      grid-template-rows: auto;
      grid-template-areas: 'config main output';
    }

    .config-panel,
    .output-panel {
      position: sticky;
      top: 2rem;
      max-height: calc(100vh - 4rem);
      overflow-y: auto;
    }
  }

  @media (max-width: 767px) {
    .table-generator {
      padding: 0.5rem;
    }

    .export-options {
      flex-direction: column;
    }

    .tab-button {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }

    .code-output pre {
      font-size: 0.75rem;
      padding: 0.75rem;
    }
  }
</style>

<script>
  import { TableGeneratorController } from '../lib/table-generator-controller';

  function generateTableCSS(config) {
    return `/* Basic table styles */
.table-responsive {
  width: 100%;
  border-collapse: collapse;
  margin: 1rem 0;
  font-family: Arial, sans-serif;
  table-layout: auto;
  word-wrap: break-word;
}

.table-bordered {
  border: 1px solid #dee2e6;
}

.table-bordered th,
.table-bordered td {
  border: 1px solid #dee2e6;
  padding: 0.75rem;
  text-align: left;
  max-width: 200px;
  overflow-wrap: break-word;
}

.table-bordered th {
  background-color: #f8f9fa;
  font-weight: 600;
}

.table-striped tbody tr:nth-of-type(odd) {
  background-color: #f8f9fa;
}

/* Responsive table */
@media (max-width: 768px) {
  .table-responsive {
    display: block;
    width: 100%;
    overflow-x: auto;
    white-space: nowrap;
  }
  
  .table-bordered th,
  .table-bordered td {
    min-width: 120px;
    max-width: 150px;
  }
}`;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const initialConfig = {
      rows: 3,
      cols: 3,
      hasHeader: true,
      bordered: true,
      striped: false,
      responsive: true,
    };

    const tableController = new TableGeneratorController(initialConfig);
    window.tableController = tableController;

    const htmlOutput = document.getElementById('html-output');
    const cssOutput = document.getElementById('css-output');
    const csvOutput = document.getElementById('csv-output');

    function updateOutputs() {
      const config = tableController.getConfig();

      const html = tableController.generateHTML();
      htmlOutput.textContent = html;

      const css = generateTableCSS(config);
      cssOutput.textContent = css;

      const csv = tableController.exportAsCSV();
      csvOutput.textContent = csv;
    }

    updateOutputs();

    document.querySelectorAll('.tab-button').forEach(button => {
      button.addEventListener('click', () => {
        const tab = button.dataset.tab;

        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));

        button.classList.add('active');
        document.getElementById(`${tab}-panel`).classList.add('active');
      });
    });

    document.querySelectorAll('.copy-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const targetId = button.dataset.target;
        const content = document.getElementById(targetId).textContent;

        try {
          await navigator.clipboard.writeText(content);
          const originalText = button.innerHTML;
          button.innerHTML =
            '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="20,6 9,17 4,12"></polyline></svg> Copied!';
          setTimeout(() => {
            button.innerHTML = originalText;
          }, 2000);
        } catch (err) {
          console.error('Copy failed:', err);
        }
      });
    });

    document.getElementById('download-html')?.addEventListener('click', () => {
      const config = tableController.getConfig();
      const html = tableController.generateHTML();
      const css = generateTableCSS(config);

      const fullHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Table</title>
    <style>
${css}
    </style>
</head>
<body>
${html}
</body>
</html>`;

      const blob = new Blob([fullHtml], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'table.html';
      a.click();
      URL.revokeObjectURL(url);
    });

    document.getElementById('download-csv')?.addEventListener('click', () => {
      const csv = tableController.exportAsCSV();
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'table.csv';
      a.click();
      URL.revokeObjectURL(url);
    });

    document.getElementById('import-csv')?.addEventListener('click', () => {
      document.getElementById('csv-file-input').click();
    });

    document.getElementById('csv-file-input')?.addEventListener('change', e => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = e => {
          try {
            tableController.importFromCSV(e.target.result);
            updateOutputs();

            const configEvent = new CustomEvent('tableConfigChanged');
            const dataEvent = new CustomEvent('tableDataChanged', {
              detail: { config: tableController.getConfig() },
            });
            document.dispatchEvent(configEvent);
            document.dispatchEvent(dataEvent);
          } catch (error) {
            alert('Error importing CSV: ' + error.message);
          }
        };
        reader.readAsText(file);
      }
    });

    document.addEventListener('tableConfigChanged', updateOutputs);
    document.addEventListener('tableDataChanged', updateOutputs);
  });
</script>
