---
import { generateToolsBreadcrumbs } from '@/shared/helpers/breadcrumbs.helpers';
import Breadcrumbs from '@/shared/ui/base/breadcrumbs.astro';
import ConverterHeader from '@/shared/ui/converters/converter-header.astro';
import ConverterPanel from '@/shared/ui/converters/converter-panel.astro';
import HeadingBlock from '@/shared/ui/layout/heading-block.astro';

const breadcrumbItems = generateToolsBreadcrumbs('HTML ⇄ Markdown Converter');

const converterOptions = [{ id: 'modeToggle', label: 'Markdown to HTML', checked: false }];
---

<Breadcrumbs
  items={breadcrumbItems}
  class='mt-10'
/>

<HeadingBlock
  title='HTML ⇄ Markdown Converter'
  description='Convert between HTML and Markdown formats easily with this bidirectional converter.'
  class='mt-0'
/>

<ConverterHeader
  options={converterOptions}
  class='mt-10'
/>

<div class='main-content'>
  <ConverterPanel
    type='input'
    title='HTML Input'
    icon='📝'
    textareaId='htmlInput'
    placeholder='Paste your HTML content here...'
    showSampleButton={true}
    showStats={true}
  />

  <ConverterPanel
    type='output'
    title='Markdown Output'
    icon='📄'
    textareaId='markdownOutput'
    placeholder='Markdown content will appear here...'
    readonly={true}
    showStats={true}
  />
</div>

<script>
  if (typeof window.markdownConverterInitialized === 'undefined') {
    window.markdownConverterInitialized = true;
    
    console.log('HTML-Markdown converter script started');

    const requiredElements = ['htmlInput', 'markdownOutput', 'convertBtn', 'clearBtn', 'copyBtn'];
    
    function checkRequiredElements() {
      const missing = requiredElements.filter(id => !document.getElementById(id));
      if (missing.length > 0) {
        console.log(`HTML-Markdown converter: Missing elements [${missing.join(', ')}]`);
        return false;
      }
      return true;
    }

    let initAttempts = 0;
    const maxAttempts = 50;
    const retryDelay = 100;

    async function initializeMarkdownConverter() {
      initAttempts++;
      console.log(`HTML-Markdown converter attempt ${initAttempts}: Checking elements...`);

      if (!checkRequiredElements()) {
        if (initAttempts < maxAttempts) {
          console.log(`Retrying in ${retryDelay}ms...`);
          setTimeout(initializeMarkdownConverter, retryDelay);
          return;
        } else {
          console.error('HTML-Markdown converter: Failed to find all required elements after maximum attempts');
          return;
        }
      }

      try {
        console.log('All required elements found, importing controller...');
        
        const { HtmlMarkdownController } = await import('./lib/converter-controller');
        
        console.log('Controller module loaded, creating instance...');
        const controller = new HtmlMarkdownController();
        
        window.markdownController = controller;
        
        console.log('✅ HTML-Markdown converter initialized successfully');
        
      } catch (error) {
        console.error('❌ Error initializing HTML-Markdown converter:', error);
        
        if (initAttempts < maxAttempts) {
          console.log('Retrying initialization...');
          setTimeout(initializeMarkdownConverter, retryDelay * 2);
        }
      }
    }

    function startInitialization() {
      console.log(`Document readyState: ${document.readyState}`);
      
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeMarkdownConverter);
      } else {
        setTimeout(initializeMarkdownConverter, 50);
      }
    }

    startInitialization();

    window.addEventListener('load', () => {
      setTimeout(() => {
        if (!window.markdownController) {
          console.log('Performing final initialization attempt on window load...');
          initializeMarkdownConverter();
        }
      }, 500);
    });
  } else {
    console.log('HTML-Markdown converter script already initialized, skipping');
  }
</script>

<style>
  .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .main-content {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
}