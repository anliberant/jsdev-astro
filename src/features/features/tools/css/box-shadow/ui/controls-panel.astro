---
import Button from '@/shared/ui/base/button.astro';
---

<div class='controls-panel'>
  <div class='controls-content'>
    <h2>Box Shadow Configuration</h2>

    <!-- Presets Section -->
    <div class='control-section'>
      <h3>Quick Presets</h3>
      <div class='preset-grid'>
        <button
          class='preset-btn soft'
          id='preset-soft'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: 0 2px 8px rgba(0,0,0,0.15)'
            ></div>
          </span>
          Soft
        </button>
        <button
          class='preset-btn material'
          id='preset-material'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)'
            ></div>
          </span>
          Material
        </button>
        <button
          class='preset-btn hard'
          id='preset-hard'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: 4px 4px 0 rgba(0,0,0,0.25)'
            ></div>
          </span>
          Hard
        </button>
        <button
          class='preset-btn inset'
          id='preset-inset'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: inset 0 2px 4px rgba(0,0,0,0.25); background: #f0f0f0'
            ></div>
          </span>
          Inset
        </button>
        <button
          class='preset-btn colored'
          id='preset-colored'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: 0 4px 12px rgba(59,130,246,0.4)'
            ></div>
          </span>
          Colored
        </button>
        <button
          class='preset-btn multi'
          id='preset-multi'>
          <span class='preset-preview'>
            <div
              class='preview-mini'
              style='box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24), 0 4px 8px rgba(0,0,0,0.12)'
            ></div>
          </span>
          Multi
        </button>
      </div>
    </div>

    <!-- Shadows List -->
    <div class='control-section'>
      <div class='section-header'>
        <h3>Shadows</h3>
        <button
          class='add-shadow-btn'
          id='add-shadow-btn'
          title='Add Shadow'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <line
              x1='12'
              y1='5'
              x2='12'
              y2='19'
            ></line>
            <line
              x1='5'
              y1='12'
              x2='19'
              y2='12'
            ></line>
          </svg>
        </button>
      </div>
      <div
        class='shadows-list'
        id='shadows-list'>
        <!-- Shadows will be rendered here -->
      </div>
    </div>

    <!-- Shadow Properties -->
    <div class='control-section'>
      <h3>Shadow Properties</h3>

      <div class='control-group'>
        <label class='checkbox-label'>
          <input
            type='checkbox'
            id='inset-shadow'
          />
          <span class='checkmark'></span>
          Inset Shadow
        </label>
      </div>

      <div class='control-group'>
        <label for='offset-x'>Horizontal Offset</label>
        <div class='range-group'>
          <input
            type='range'
            id='offset-x'
            min='-50'
            max='50'
            value='0'
          />
          <span
            id='offset-x-value'
            class='range-value'
            >0px</span
          >
        </div>
      </div>

      <div class='control-group'>
        <label for='offset-y'>Vertical Offset</label>
        <div class='range-group'>
          <input
            type='range'
            id='offset-y'
            min='-50'
            max='50'
            value='4'
          />
          <span
            id='offset-y-value'
            class='range-value'
            >4px</span
          >
        </div>
      </div>

      <div class='control-group'>
        <label for='blur-radius'>Blur Radius</label>
        <div class='range-group'>
          <input
            type='range'
            id='blur-radius'
            min='0'
            max='100'
            value='8'
          />
          <span
            id='blur-radius-value'
            class='range-value'
            >8px</span
          >
        </div>
      </div>

      <div class='control-group'>
        <label for='spread-radius'>Spread Radius</label>
        <div class='range-group'>
          <input
            type='range'
            id='spread-radius'
            min='-50'
            max='50'
            value='0'
          />
          <span
            id='spread-radius-value'
            class='range-value'
            >0px</span
          >
        </div>
      </div>

      <div class='control-group'>
        <label for='shadow-color'>Shadow Color</label>
        <div class='color-input-group'>
          <input
            type='color'
            id='shadow-color'
            value='#000000'
          />
          <input
            type='text'
            value='#000000'
            readonly
          />
        </div>
      </div>

      <div class='control-group'>
        <label for='shadow-opacity'>Opacity</label>
        <div class='range-group'>
          <input
            type='range'
            id='shadow-opacity'
            min='0'
            max='1'
            step='0.05'
            value='0.25'
          />
          <span
            id='opacity-value'
            class='range-value'
            >25%</span
          >
        </div>
      </div>
    </div>

    <!-- Preview Customization -->
    <div class='control-section'>
      <h3>Preview Settings</h3>

      <div class='control-group'>
        <label for='preview-shape'>Shape</label>
        <select id='preview-shape'>
          <option value='rectangle'>Rectangle</option>
          <option value='rounded'>Rounded</option>
          <option value='circle'>Circle</option>
        </select>
      </div>

      <div class='control-group'>
        <label for='preview-width'>Width</label>
        <input
          type='number'
          id='preview-width'
          min='50'
          max='400'
          value='200'
        />
      </div>

      <div class='control-group'>
        <label for='preview-height'>Height</label>
        <input
          type='number'
          id='preview-height'
          min='50'
          max='400'
          value='120'
        />
      </div>

      <div class='control-group'>
        <label for='preview-bg-color'>Background</label>
        <div class='color-input-group'>
          <input
            type='color'
            id='preview-bg-color'
            value='#ffffff'
          />
          <input
            type='text'
            value='#ffffff'
            readonly
          />
        </div>
      </div>
    </div>

    <!-- Reset Button -->
    <div class='control-section'>
      <button
        class='reset-btn'
        id='reset-button'>
        <svg
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='2'>
          <path d='M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8'></path>
          <path d='M3 3v5h5'></path>
        </svg>
        Reset to Default
      </button>
    </div>
  </div>
</div>

<style>
  .controls-panel {
    background: hsl(var(--muted));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    height: fit-content;
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
    width: 100%;
    min-width: 320px;
  }

  .controls-content {
    padding: 1.5rem;
  }

  .controls-panel h2 {
    margin: 0 0 1.5rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: hsl(var(--foreground));
  }

  .control-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid hsl(var(--border));
  }

  .control-section:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .control-section h3 {
    margin: 0 0 1rem 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: hsl(var(--foreground));
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1rem;
  }

  .section-header h3 {
    margin: 0;
  }

  .add-shadow-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .add-shadow-btn:hover {
    background: hsl(var(--primary) / 0.9);
  }

  .preset-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .preset-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border: 2px solid hsl(var(--border));
    border-radius: var(--radius);
    background: hsl(var(--background));
    color: hsl(var(--foreground));
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .preset-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-color: hsl(var(--primary));
  }

  .preset-preview {
    display: block;
    width: 100%;
    height: 20px;
    position: relative;
  }

  .preview-mini {
    width: 20px;
    height: 12px;
    background: white;
    margin: 0 auto;
    border-radius: 2px;
  }

  .shadows-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .shadow-item {
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    background: hsl(var(--background));
    padding: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .shadow-item:hover {
    border-color: hsl(var(--primary));
  }

  .shadow-item.active {
    border-color: hsl(var(--primary));
    background: hsl(var(--primary) / 0.05);
  }

  .shadow-item-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .shadow-name {
    font-weight: 500;
    font-size: 0.875rem;
  }

  .shadow-actions {
    display: flex;
    gap: 0.25rem;
  }

  .shadow-duplicate-btn,
  .shadow-delete-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    background: transparent;
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .shadow-duplicate-btn:hover {
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
  }

  .shadow-delete-btn:hover:not(:disabled) {
    background: hsl(var(--destructive));
    color: hsl(var(--destructive-foreground));
  }

  .shadow-delete-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .shadow-preview-mini {
    display: flex;
    justify-content: center;
    margin: 0.5rem 0;
  }

  .mini-box {
    width: 30px;
    height: 20px;
    background: white;
    border-radius: 2px;
  }

  .shadow-info {
    text-align: center;
    color: hsl(var(--muted-foreground));
  }

  .control-group {
    margin-bottom: 1rem;
  }

  .control-group:last-child {
    margin-bottom: 0;
  }

  .control-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: hsl(var(--foreground));
  }

  .control-group input[type='text'],
  .control-group input[type='number'],
  .control-group select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    background: hsl(var(--background));
    color: hsl(var(--foreground));
    font-size: 0.875rem;
  }

  .control-group input:focus,
  .control-group select:focus {
    outline: none;
    border-color: hsl(var(--primary));
    box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);
  }

  .range-group {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .range-group input[type='range'] {
    flex: 1;
    height: 6px;
    background: hsl(var(--border));
    border-radius: 3px;
    outline: none;
    -webkit-appearance: none;
  }

  .range-group input[type='range']::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 18px;
    height: 18px;
    background: hsl(var(--primary));
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }

  .range-value {
    font-size: 0.75rem;
    font-weight: 500;
    color: hsl(var(--muted-foreground));
    min-width: 3rem;
    text-align: right;
  }

  .color-input-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .color-input-group input[type='color'] {
    width: 40px;
    height: 32px;
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    cursor: pointer;
    background: none;
    padding: 0;
  }

  .color-input-group input[type='text'] {
    flex: 1;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    height: 32px;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    cursor: pointer;
    margin-bottom: 0;
    font-size: 0.875rem;
    color: hsl(var(--foreground));
  }

  .checkbox-label input[type='checkbox'] {
    display: none;
  }

  .checkmark {
    width: 18px;
    height: 18px;
    border: 2px solid hsl(var(--border));
    border-radius: var(--radius);
    margin-right: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    position: relative;
    background: hsl(var(--background));
  }

  .checkmark:after {
    content: '';
    width: 6px;
    height: 10px;
    border: solid hsl(var(--primary-foreground));
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark {
    background: hsl(var(--primary));
    border-color: hsl(var(--primary));
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark:after {
    opacity: 1;
  }

  .reset-btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 2px solid hsl(var(--border));
    border-radius: var(--radius);
    background: hsl(var(--background));
    color: hsl(var(--muted-foreground));
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .reset-btn:hover {
    background: hsl(var(--destructive));
    color: hsl(var(--destructive-foreground));
    border-color: hsl(var(--destructive));
  }

  @media (max-width: 1024px) {
    .controls-panel {
      position: relative;
      top: 0;
      max-height: none;
    }

    .preset-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 768px) {
    .controls-content {
      padding: 1rem;
    }

    .preset-grid {
      grid-template-columns: 1fr 1fr;
    }
  }
</style>

<script>
  // Update color text inputs when color pickers change
  document.addEventListener('DOMContentLoaded', () => {
    const colorInputs = document.querySelectorAll('input[type="color"]');

    colorInputs.forEach(colorInput => {
      const textInput = colorInput.nextElementSibling;

      colorInput.addEventListener('input', () => {
        textInput.value = colorInput.value.toUpperCase();
      });

      textInput.addEventListener('input', () => {
        if (/^#[0-9A-F]{6}$/i.test(textInput.value)) {
          colorInput.value = textInput.value;
        }
      });
    });
  });
</script>
