---
import { generateToolsBreadcrumbs } from '@/shared/helpers/breadcrumbs.helpers';
import Breadcrumbs from '@/shared/ui/base/breadcrumbs.astro';
import ConverterHeader from '@/shared/ui/converters/converter-header.astro';
import ConverterPanel from '@/shared/ui/converters/converter-panel.astro';
import HeadingBlock from '@/shared/ui/layout/heading-block.astro';

const breadcrumbItems = generateToolsBreadcrumbs('HTML Tag Remover');

const converterOptions = [
  { id: 'preserveTextOption', label: 'Preserve Text', checked: true },
  { id: 'preserveWhitespaceOption', label: 'Preserve Whitespace', checked: false },
  { id: 'removeSpecificTagsOption', label: 'Remove Specific Tags Only', checked: false },
  { id: 'convertEntitiesOption', label: 'Convert HTML Entities', checked: true },
];
---

<Breadcrumbs
  items={breadcrumbItems}
  class='mt-10'
/>

<HeadingBlock
  title='HTML Tag Remover'
  description='Remove HTML tags from your content while preserving text. Configure removal options and convert HTML entities with our free online tool.'
  class='mt-0'
/>

<ConverterHeader
  options={converterOptions}
  class='mt-10'
/>

<div class='main-content'>
  <ConverterPanel
    type='input'
    title='HTML Input'
    icon='📝'
    textareaId='htmlInput'
    placeholder='Paste your HTML content here...'
    showSampleButton={true}
    showStats={true}
  />

  <ConverterPanel
    type='output'
    title='Plain Text Output'
    icon='📄'
    textareaId='textOutput'
    placeholder='Plain text will appear here...'
    readonly={true}
    showStats={true}
  />
</div>

<script>
  import { HtmlTagRemoverController } from './lib/remover-controller';

  let initAttempts = 0;
  const maxAttempts = 50;
  const retryDelay = 100;

  function checkRequiredElements(): boolean {
    const required = ['htmlInput', 'textOutput', 'convertBtn', 'clearBtn', 'copyBtn'];
    return required.every(id => {
      const element = document.getElementById(id);
      if (!element) {
        console.warn(`Element ${id} not found`);
        return false;
      }
      return true;
    });
  }

  function initializeConverter(): void {
    initAttempts++;

    console.log(`Attempt ${initAttempts}: Initializing HTML Tag Remover...`);

    if (!checkRequiredElements()) {
      if (initAttempts < maxAttempts) {
        console.log(`Missing elements, retrying in ${retryDelay}ms...`);
        setTimeout(initializeConverter, retryDelay);
        return;
      } else {
        console.error('Failed to find all required elements after maximum attempts');
        return;
      }
    }

    try {
      console.log('All required elements found, creating controller...');
      const controller = new HtmlTagRemoverController();
      console.log('HTML Tag Remover initialized successfully');

      if (typeof window !== 'undefined') {
        (window as any).tagRemoverController = controller;
      }
    } catch (error) {
      console.error('Error initializing HTML Tag Remover:', error);

      if (initAttempts < maxAttempts) {
        console.log('Retrying initialization...');
        setTimeout(initializeConverter, retryDelay * 2);
      }
    }
  }

  function startInitialization(): void {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeConverter);
    } else if (document.readyState === 'interactive') {
      setTimeout(initializeConverter, 50);
    } else {
      requestAnimationFrame(() => {
        setTimeout(initializeConverter, 0);
      });
    }
  }

  startInitialization();

  if (typeof window !== 'undefined') {
    window.addEventListener('load', () => {
      setTimeout(() => {
        if (initAttempts === 0 || !checkRequiredElements()) {
          console.log('Performing final initialization attempt...');
          initializeConverter();
        }
      }, 500);
    });
  }
</script>
