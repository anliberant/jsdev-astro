<div class='table-preview'>
  <div class='preview-header'>
    <div class='preview-controls'>
      <div class='view-toggle'>
        <button
          type='button'
          class='toggle-btn active'
          data-view='desktop'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <rect
              x='2'
              y='3'
              width='20'
              height='14'
              rx='2'
              ry='2'
            ></rect>
            <line
              x1='8'
              y1='21'
              x2='16'
              y2='21'
            ></line>
            <line
              x1='12'
              y1='17'
              x2='12'
              y2='21'
            ></line>
          </svg>
          Desktop
        </button>

        <button
          type='button'
          class='toggle-btn'
          data-view='tablet'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <rect
              x='4'
              y='2'
              width='16'
              height='20'
              rx='2'
              ry='2'
            ></rect>
          </svg>
          Tablet
        </button>

        <button
          type='button'
          class='toggle-btn'
          data-view='mobile'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <rect
              x='5'
              y='2'
              width='14'
              height='20'
              rx='2'
              ry='2'
            ></rect>
            <line
              x1='12'
              y1='18'
              x2='12.01'
              y2='18'
            ></line>
          </svg>
          Mobile
        </button>
      </div>

      <div class='theme-toggle'>
        <button
          type='button'
          class='toggle-btn active'
          data-theme='light'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <circle
              cx='12'
              cy='12'
              r='5'
            ></circle>
            <line
              x1='12'
              y1='1'
              x2='12'
              y2='3'
            ></line>
            <line
              x1='12'
              y1='21'
              x2='12'
              y2='23'
            ></line>
            <line
              x1='4.22'
              y1='4.22'
              x2='5.64'
              y2='5.64'
            ></line>
            <line
              x1='18.36'
              y1='18.36'
              x2='19.78'
              y2='19.78'
            ></line>
            <line
              x1='1'
              y1='12'
              x2='3'
              y2='12'
            ></line>
            <line
              x1='21'
              y1='12'
              x2='23'
              y2='12'
            ></line>
            <line
              x1='4.22'
              y1='19.78'
              x2='5.64'
              y2='18.36'
            ></line>
            <line
              x1='18.36'
              y1='5.64'
              x2='19.78'
              y2='4.22'
            ></line>
          </svg>
          Light
        </button>

        <button
          type='button'
          class='toggle-btn'
          data-theme='dark'>
          <svg
            width='16'
            height='16'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'>
            <path d='M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z'></path>
          </svg>
          Dark
        </button>
      </div>
    </div>
  </div>

  <div class='preview-container'>
    <div
      class='viewport-frame desktop'
      id='viewport-frame'>
      <div
        class='preview-content'
        id='preview-content'>
        <!-- Generated table will appear here -->
      </div>
    </div>
  </div>

  <div class='preview-info'>
    <div class='info-item'>
      <span class='label'>Dimensions:</span>
      <span
        class='value'
        id='table-dimensions'
        >3Ã—3</span
      >
    </div>

    <div class='info-item'>
      <span class='label'>Cells:</span>
      <span
        class='value'
        id='table-cells'
        >9 cells</span
      >
    </div>

    <div class='info-item'>
      <span class='label'>Size:</span>
      <span
        class='value'
        id='table-size'
        >~2.1 KB</span
      >
    </div>
  </div>
</div>

<style>
  .table-preview {
    background: hsl(var(--background));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    overflow: hidden;
  }

  .preview-header {
    padding: 1rem;
    background: hsl(var(--muted));
    border-bottom: 1px solid hsl(var(--border));
  }

  .preview-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .view-toggle,
  .theme-toggle {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: hsl(var(--background));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    padding: 0.25rem;
  }

  .toggle-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: none;
    border-radius: var(--radius);
    color: hsl(var(--muted-foreground));
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
    min-height: 32px;
  }

  .toggle-btn:hover {
    background: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
  }

  .toggle-btn.active {
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
  }

  .toggle-btn svg {
    flex-shrink: 0;
  }

  .preview-container {
    padding: 2rem;
    background: #f8fafc;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .preview-container.dark-theme {
    background: #1e293b;
  }

  .viewport-frame {
    background: white;
    border-radius: var(--radius);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: auto;
    max-height: 400px;
  }

  .viewport-frame.desktop {
    width: 100%;
    max-width: 800px;
  }

  .viewport-frame.tablet {
    width: 768px;
    max-width: 100%;
  }

  .viewport-frame.mobile {
    width: 375px;
    max-width: 100%;
  }

  .viewport-frame.dark-theme {
    background: #0f172a;
    color: #f1f5f9;
  }

  .preview-content {
    padding: 1.5rem;
    min-height: 200px;
    transition: color 0.3s ease;
  }

  .preview-content table {
    width: 100%;
    border-collapse: collapse;
    font-family:
      'Inter',
      -apple-system,
      BlinkMacSystemFont,
      sans-serif;
    font-size: 0.875rem;
    margin: 0;
  }

  .preview-content.bordered table,
  .preview-content.bordered th,
  .preview-content.bordered td {
    border: 1px solid #e2e8f0;
  }

  .preview-content.dark-theme.bordered table,
  .preview-content.dark-theme.bordered th,
  .preview-content.dark-theme.bordered td {
    border-color: #334155;
  }

  .preview-content th,
  .preview-content td {
    padding: 0.75rem;
    text-align: left;
    vertical-align: top;
  }

  .preview-content th {
    background: #f8fafc;
    font-weight: 600;
    color: #374151;
  }

  .preview-content.dark-theme th {
    background: #1e293b;
    color: #f1f5f9;
  }

  .preview-content.striped tr:nth-child(even) td {
    background: #f9fafb;
  }

  .preview-content.dark-theme.striped tr:nth-child(even) td {
    background: #1e293b;
  }

  .preview-content tr:hover td {
    background: #f3f4f6;
  }

  .preview-content.dark-theme tr:hover td {
    background: #334155;
  }

  .preview-content.dark-theme {
    color: #f1f5f9;
  }

  .preview-content.dark-theme td {
    color: #f1f5f9;
  }

  .preview-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: hsl(var(--muted));
    border-top: 1px solid hsl(var(--border));
    font-size: 0.75rem;
    color: hsl(var(--muted-foreground));
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .info-item .label {
    font-weight: 500;
  }

  .info-item .value {
    color: hsl(var(--foreground));
    font-weight: 600;
  }

  /* Responsive preview */
  @media (max-width: 768px) {
    .preview-controls {
      flex-direction: column;
      align-items: stretch;
      gap: 0.75rem;
    }

    .view-toggle,
    .theme-toggle {
      justify-content: center;
    }

    .toggle-btn {
      flex: 1;
      justify-content: center;
    }

    .preview-container {
      padding: 1rem;
    }

    .viewport-frame.tablet,
    .viewport-frame.desktop {
      width: 100%;
    }

    .viewport-frame.mobile {
      width: 100%;
      max-width: 375px;
    }

    .preview-info {
      flex-direction: column;
      gap: 0.5rem;
      align-items: stretch;
    }

    .info-item {
      justify-content: space-between;
    }
  }
</style>

<script>
  function getTableController() {
    return window.tableController;
  }

  function updatePreview() {
    const controller = getTableController();
    if (!controller) return;

    const html = controller.generateHTML();
    const config = controller.getConfig();
    const data = controller.getData();

    const previewContent = document.getElementById('preview-content');
    previewContent.innerHTML = html;

    previewContent.className = 'preview-content';
    if (config.bordered) previewContent.classList.add('bordered');
    if (config.striped) previewContent.classList.add('striped');

    const isDarkTheme = document.querySelector('[data-theme].active').dataset.theme === 'dark';
    if (isDarkTheme) previewContent.classList.add('dark-theme');

    updatePreviewInfo(config, data, html);
  }

  function updatePreviewInfo(config, data, html) {
    const totalCells = data.reduce(
      (sum, row) => sum + row.cells.filter(cell => !cell.merged).length,
      0
    );
    const htmlSize = new Blob([html]).size;

    document.getElementById('table-dimensions').textContent = `${config.rows}Ã—${config.cols}`;
    document.getElementById('table-cells').textContent = `${totalCells} cells`;
    document.getElementById('table-size').textContent = formatBytes(htmlSize);
  }

  function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }

  function updateViewport(viewType) {
    const frame = document.getElementById('viewport-frame');
    frame.className = `viewport-frame ${viewType}`;

    const isDarkTheme = document.querySelector('[data-theme].active').dataset.theme === 'dark';
    if (isDarkTheme) frame.classList.add('dark-theme');
  }

  function updateTheme(theme) {
    const container = document.querySelector('.preview-container');
    const frame = document.getElementById('viewport-frame');
    const content = document.getElementById('preview-content');

    container.className = `preview-container ${theme === 'dark' ? 'dark-theme' : ''}`;

    const currentView = document.querySelector('[data-view].active').dataset.view;
    frame.className = `viewport-frame ${currentView} ${theme === 'dark' ? 'dark-theme' : ''}`;

    const contentClasses = content.className.replace(/dark-theme/g, '').trim();
    content.className = `${contentClasses} ${theme === 'dark' ? 'dark-theme' : ''}`.trim();
  }

  document.querySelectorAll('[data-view]').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('[data-view]').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      updateViewport(btn.dataset.view);
    });
  });

  document.querySelectorAll('[data-theme]').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('[data-theme]').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      updateTheme(btn.dataset.theme);
    });
  });

  document.addEventListener('tableConfigChanged', updatePreview);
  document.addEventListener('tableDataChanged', updatePreview);

  document.addEventListener('DOMContentLoaded', () => {
    const checkController = setInterval(() => {
      if (window.tableController) {
        clearInterval(checkController);
        updatePreview();
      }
    }, 100);
  });
</script>
