---
import { generateToolsBreadcrumbs } from '@/shared/helpers/breadcrumbs.helpers';
import Breadcrumbs from '@/shared/ui/base/breadcrumbs.astro';
import ConverterHeader from '@/shared/ui/converters/converter-header.astro';
import ConverterPanel from '@/shared/ui/converters/converter-panel.astro';
import HeadingBlock from '@/shared/ui/layout/heading-block.astro';

const breadcrumbItems = generateToolsBreadcrumbs('HTML ⇄ Markdown Converter');

const converterOptions = [{ id: 'modeToggle', label: 'Markdown to HTML', checked: false }];
---

<Breadcrumbs
  items={breadcrumbItems}
  class='mt-10'
/>

<HeadingBlock
  title='HTML ⇄ Markdown Converter'
  description='Convert between HTML and Markdown formats easily with this bidirectional converter.'
  class='mt-0'
/>

<ConverterHeader
  options={converterOptions}
  class='mt-10'
/>

<div class='main-content'>
  <ConverterPanel
    type='input'
    title='HTML Input'
    icon='📝'
    textareaId='htmlInput'
    placeholder='Paste your HTML content here...'
    showSampleButton={true}
    showStats={true}
  />

  <ConverterPanel
    type='output'
    title='Markdown Output'
    icon='📄'
    textareaId='markdownOutput'
    placeholder='Markdown content will appear here...'
    readonly={true}
    showStats={true}
  />
</div>

<script>
  const requiredElements = ['htmlInput', 'markdownOutput', 'convertBtn', 'clearBtn', 'copyBtn'];
  const hasRequiredElements = requiredElements.every(id => document.getElementById(id) !== null);

  if (!hasRequiredElements) {
    console.log('HTML-Markdown converter: Not the right page, skipping');
  } else {
    let initAttempts = 0;
    const maxAttempts = 50;
    const retryDelay = 100;

    function checkRequiredElements(): boolean {
      return requiredElements.every(id => {
        const element = document.getElementById(id);
        if (!element) {
          console.warn(`Element ${id} not found`);
          return false;
        }
        return true;
      });
    }

    function initializeConverter(): void {
      initAttempts++;

      console.log(`Attempt ${initAttempts}: Initializing HTML-Markdown converter...`);

      if (!checkRequiredElements()) {
        if (initAttempts < maxAttempts) {
          console.log(`Missing elements, retrying in ${retryDelay}ms...`);
          setTimeout(initializeConverter, retryDelay);
          return;
        } else {
          console.error('Failed to find all required elements after maximum attempts');
          return;
        }
      }

      import('./lib/converter-controller').then(({ HtmlMarkdownController }) => {
        try {
          console.log('All required elements found, creating controller...');
          const controller = new HtmlMarkdownController();
          console.log('HTML-Markdown converter initialized successfully');

          if (typeof window !== 'undefined') {
            (window as any).markdownController = controller;
          }
        } catch (error) {
          console.error('Error initializing HTML-Markdown converter:', error);

          if (initAttempts < maxAttempts) {
            console.log('Retrying initialization...');
            setTimeout(initializeConverter, retryDelay * 2);
          }
        }
      }).catch(error => {
        console.error('Failed to load HTML-Markdown converter:', error);
      });
    }

    function startInitialization(): void {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeConverter);
      } else if (document.readyState === 'interactive') {
        setTimeout(initializeConverter, 50);
      } else {
        requestAnimationFrame(() => {
          setTimeout(initializeConverter, 0);
        });
      }
    }

    startInitialization();

    if (typeof window !== 'undefined') {
      window.addEventListener('load', () => {
        setTimeout(() => {
          if (initAttempts === 0 || !checkRequiredElements()) {
            console.log('Performing final initialization attempt...');
            initializeConverter();
          }
        }, 500);
      });
    }
  }
</script>

<style>
  .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .main-content {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
}