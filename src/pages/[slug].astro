---
import type { GetStaticPaths } from 'astro';
import { Image } from 'astro:assets';
import { CollectionEntry, getCollection, render } from 'astro:content';

import BaseLayout from '@/app/layouts/base-layout.astro';
import { generatePostBreadcrumbs } from '@/shared/helpers/breadcrumbs.helpers';
import Badge from '@/shared/ui/base/badge.astro';
import Breadcrumbs from '@/shared/ui/base/breadcrumbs.astro';
import RelatedPosts from '@/shared/ui/base/related-posts/related-posts.astro';
import Separator from '@/shared/ui/base/separator.astro';
import Tags from '@/shared/ui/layout/tags.astro';
import Toc from '@/shared/ui/layout/toc.astro';
import { mdxComponents } from '@/shared/ui/mdx';
import { formatDate } from '@/shared/utils/index';

export const getStaticPaths = (async () => {
  const allPosts = await getCollection('posts', ({ data }) => !data.isDraft);
  return allPosts.map(p => ({
    params: {
      slug: p.data.slug,
    },
    props: {
      post: p,
    },
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;

type Props = {
  post: CollectionEntry<'posts'>;
};

const { post } = Astro.props;

const { Content, remarkPluginFrontmatter, headings } = await render(post);

const categorySlug =
  post.data.category ? post.data.category.toLowerCase().replace(/\s+/g, '-') : '';
const breadcrumbItems = generatePostBreadcrumbs(
  post.data.category ?? '',
  categorySlug,
  post.data.title
);

const newDate = formatDate(post.data.date);
---

<BaseLayout
  title={post.data.title}
  description={post.data.desc}
  image={post.data.image.src}
  type='article'>
  <main class='main'>
    <Breadcrumbs
      items={breadcrumbItems}
      class='mt-10'
    />
    <article class='post-article'>
      <h1 class='post-title'>{post.data.heading}</h1>
      <span class='read-meta'>
        <span>{newDate}</span>
        <span class='read-time'>
          <svg
            width='15'
            height='13'
            viewBox='0 0 15 13'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'>
            <path
              d='M7.5 2.38804V12.138M7.5 2.38804C7.5 2.38804 4.25 -0.397677 1 1.92375V12.138C4.25 9.81661 7.5 12.138 7.5 12.138C7.5 12.138 10.75 9.81661 14 12.138V1.92375C10.75 -0.397677 7.5 2.38804 7.5 2.38804Z'
            ></path>
          </svg>
          {remarkPluginFrontmatter.minutesRead}
        </span>
      </span>
      <Toc items={headings} />
      <div class='post-image-wrapper'>
        <Image
          src={post.data.image}
          alt={post.data.title}
          title={post.data.title}
          width={800}
          class='post-image'
        />
      </div>

      <div class='post-content'>
        <Content components={mdxComponents} />
      </div>

      <footer class='post-footer'>
        <Separator />
        <div class='tags-wrapper'>
          <a
            href={`/${categorySlug}/`}
            class='category-link'>
            <Badge
              class='category-badge'
              title={post.data.category}
              >{post.data.category}</Badge
            >
          </a>
          <Tags tags={post.data.tags} />
        </div>
        <RelatedPosts
          collection='posts'
          slug={post.data.slug}
        />
      </footer>
    </article>
  </main>
</BaseLayout>

<style>
  .read-meta {
    margin: 0.25rem 0;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 0.5rem;
  }

  .read-meta span {
    font-size: 0.875rem;
    font-weight: 300;
  }

  .read-time {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding-left: 1.75rem;
    max-height: 140px;
    font-size: 0.875rem;
    font-weight: 300;
  }

  .read-time svg {
    position: absolute;
    left: 6px;
    top: 5px;
  }

  .read-time path {
    stroke: black;
    stroke-width: 1;
    stroke-linecap: round;
    stroke-linejoin: round;
  }

  :global(.dark) .read-time path {
    stroke: white;
  }

  .post-image-wrapper {
    margin: 1.5rem 0;
    text-align: center;
  }

  .post-image {
    max-width: 100%;
    height: auto;
  }

  .post-content {
    font-size: 1.1rem;
    line-height: 1.8;
    margin: 3rem 0;
  }

  .post-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }

  .post-footer {
    margin-top: 3rem;
  }

  .tags-wrapper {
    margin: 1rem 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    column-gap: 1.25rem;
    flex-wrap: wrap;
  }

  .category-link {
    margin-left: 0.5rem;
    display: block;
    max-width: 50%;
  }

  .category-badge:hover {
    background-color: rgb(165 201 202 / var(--tw-bg-opacity, 1));
  }

  @media (max-width: 768px) {
    .main {
      margin: 1.5rem 0.25rem;
    }

    .post-title {
      font-size: 2rem;
    }
    .tags-wrapper {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .category-link {
      max-width: 100%;
      margin-left: 0;
    }
  }
</style>
