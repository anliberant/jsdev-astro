---
import BaseLayout from './base-layout.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
}

const { title, description, image, type } = Astro.props;
---

<BaseLayout
  title={title}
  description={description}
  image={image}
  type={type}>
  <slot
    name='head'
    slot='head'
  />
  <slot />
</BaseLayout>

<script>
  class ToolRouter {
    private static instance: ToolRouter;
    private initialized = false;

    static getInstance(): ToolRouter {
      if (!ToolRouter.instance) {
        ToolRouter.instance = new ToolRouter();
      }
      return ToolRouter.instance;
    }

    async initializeCurrentTool(): Promise<void> {
      if (this.initialized) return;

      const path = window.location.pathname;

      const toolMap: Record<
        string,
        {
          controller: () => Promise<any>;
          elements: string[];
        }
      > = {
        '/tools/html-to-jsx/': {
          controller: () =>
            import('@/features/tools/html/jsx/lib/converter-controller').then(m => {
              const controller = new m.HtmlToJsxConverterController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'jsxOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/html-to-pug/': {
          controller: () =>
            import('@/features/tools/html/pug/lib/converter-controller').then(m => {
              const controller = new m.HtmlToPugConverterController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'pugOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/html-to-astro/': {
          controller: () =>
            import('@/features/tools/html/astro/lib/converter-controller').then(m => {
              const controller = new m.HtmlToAstroController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'astroOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/html-markdown/': {
          controller: () =>
            import('@/features/tools/html/markdown/lib/converter-controller').then(m => {
              const controller = new m.HtmlMarkdownController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'markdownOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/html-encoder-decoder/': {
          controller: () =>
            import('@/features/tools/html/encoder/lib/encoder-controller').then(m => {
              const controller = new m.HtmlEncoderDecoderController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'htmlOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/html-tag-remover/': {
          controller: () =>
            import('@/features/tools/html/tag-remover/lib/remover-controller').then(m => {
              const controller = new m.HtmlTagRemoverController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlInput', 'htmlOutput', 'convertBtn', 'clearBtn', 'copyBtn'],
        },
        '/tools/box-shadow-generator/': {
          controller: () =>
            import('@/features/tools/css/box-shadow/lib/generator-controller').then(m => {
              const controller = new m.BoxShadowController();
              controller.initialize();
              return controller;
            }),
          elements: ['shadowPreview', 'cssOutput'],
        },
        '/tools/neobrutalism-button/': {
          controller: () =>
            import('@/features/tools/css/neobrutalism/lib/neobrutalism-controller').then(m => {
              const controller = new m.NeobrutalismController();
              controller.initialize();
              return controller;
            }),
          elements: ['buttonPreview', 'cssOutput'],
        },
        '/tools/html-table-generator/': {
          controller: () =>
            import('@/features/tools/html/table/lib/table-generator-controller').then(m => {
              const controller = new m.HtmlTableGeneratorController();
              controller.initialize();
              return controller;
            }),
          elements: ['tablePreview', 'htmlOutput'],
        },
        '/tools/html-iframe-generator/': {
          controller: () =>
            import('@/features/tools/html/iframe/lib/iframe-controller').then(m => {
              const controller = new m.HtmlIframeGeneratorController();
              controller.initialize();
              return controller;
            }),
          elements: ['iframePreview', 'htmlOutput'],
        },
        '/tools/html-boilerplate/': {
          controller: () =>
            import('@/features/tools/html/boilerplate/lib/generator-controller').then(m => {
              const controller = new m.HtmlBoilerplateController();
              controller.initialize();
              return controller;
            }),
          elements: ['htmlOutput'],
        },
        '/tools/mdx-editor/': {
          controller: () =>
            import('@/features/tools/text/mdx/mdx-editor/lib/html-markdown-controller').then(m => {
              const controller = new m.HtmlMarkdownController();
              controller.initialize();
              return controller;
            }),
          elements: ['editor', 'preview'],
        },
      };

      const toolConfig = toolMap[path];
      if (!toolConfig) {
        console.log(`No tool configuration for: ${path}`);
        return;
      }

      const missingElements = toolConfig.elements.filter(id => !document.getElementById(id));
      if (missingElements.length > 0) {
        console.log(`Missing elements for ${path}: ${missingElements.join(', ')}`);
        return;
      }

      try {
        console.log(`🚀 Initializing tool: ${path}`);
        await toolConfig.controller();
        this.initialized = true;
        console.log(`✅ Tool initialized: ${path}`);
      } catch (error) {
        console.error(`❌ Failed to initialize tool ${path}:`, error);
      }
    }

    reset(): void {
      this.initialized = false;
    }
  }

  function setupToolErrorSuppression(): void {
    window.addEventListener('error', event => {
      const suppressedErrors = [
        'Cannot set properties of null',
        'Cannot read properties of null',
        'Cannot read properties of undefined',
        'getElementById(...) is null',
      ];

      const shouldSuppress = suppressedErrors.some(error => event.message.includes(error));

      if (
        shouldSuppress &&
        (event.filename?.includes('converter') || event.filename?.includes('tool'))
      ) {
        console.warn(`🛡️ Suppressed tool error: ${event.message}`);
        event.preventDefault();
        return false;
      }
    });
  }

  function initializeToolRouter(): void {
    const toolRouter = ToolRouter.getInstance();

    const path = window.location.pathname;
    if (path.startsWith('/tools/')) {
      toolRouter.initializeCurrentTool();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setupToolErrorSuppression();
      setTimeout(initializeToolRouter, 100);
    });
  } else {
    setupToolErrorSuppression();
    setTimeout(initializeToolRouter, 100);
  }
</script>